import campeones.*
import items.*
import oleadasMinions.*

describe "Test complementarios" {
	
	// CAMPEONES
	var nocturne = new Campeon(vidaInicial=100 , ataqueInicial=20)
	
	// MINIONS
	var minions1 = new OleadaMinions ( cantidadDeMinions= 10, plusDanio=25)
	var minions2 = new OleadaMinions(cantidadDeMinions=20 , plusDanio =5)	
	var minions3 = new OleadaMinions(cantidadDeMinions=30 , plusDanio =15)
	var ejercito1 = new EjercitoDeMinions ()
	
	// ITEMS
	var tomoAmplificador1 = new TomoAmplificador()
	var anilloDoran1 = new AnilloDeDoran()	
	var bastonVacio1 = new BastonVacio ()
	var sombreroDeRabadon1 = new SombreroDeRabadon()
	var posionDeVida1 = new PosionDeVida()			
	var posionDeVida2 = new PosionDeVida()			
 	var posionDeVida3 = new PosionDeVida()	
 	 
        
    // MANEJO DE INVENTARIO Y DINERO
    
    test "campeon quiere comprar item pero no tiene dinero sufiente" {
        
        assert.throwsExceptionWithMessage("Saldo insuficiente", { => 
         nocturne.comprarItem(anilloDoran1)
        })
    }
    
    test "campeon tiene 100 de credito y compra un anillo de doran" {
        
        nocturne.dineroDisponible(300)
        nocturne.comprarItem(anilloDoran1)
        
        assert.equals(nocturne.dineroDisponible(),0)
        assert.that(nocturne.inventario().contains(anilloDoran1))
    }
    
    test "campeon con 2k de dinero se compra varios items"{
        
        nocturne.dineroDisponible(2000)
        nocturne.comprarItem(anilloDoran1) 
        nocturne.comprarItem(sombreroDeRabadon1)
        nocturne.comprarItem(posionDeVida1)
        nocturne.comprarItem(posionDeVida2)
        nocturne.comprarItem(posionDeVida3)
        nocturne.comprarItem(tomoAmplificador1)        
        assert.equals(nocturne.dineroDisponible(),450)             
    }
    
    test "campeon con 1k de dinero compra, vende items y chequea inventario"{
        
        nocturne.dineroDisponible(1000)
        assert.throwsExceptionWithMessage("No existe item en inventario",{ 
        	=> nocturne.venderItem(anilloDoran1)
        }) 
        assert.equals(nocturne.dineroDisponible(),1000)
        nocturne.comprarItem(anilloDoran1)
        nocturne.comprarItem(sombreroDeRabadon1)
        assert.equals(nocturne.dineroDisponible(),100)
        nocturne.venderItem(anilloDoran1)
        nocturne.venderItem(sombreroDeRabadon1)
        assert.equals(nocturne.dineroDisponible(),550)
        assert.equals(nocturne.inventario(),[])
    
    }
    
	test "Equipado de items, control de vida y ataque"{
         
		nocturne.dineroDisponible(2500)
		nocturne.comprarItem(anilloDoran1)
		assert.equals(nocturne.danioRecibido(),5)
		assert.equals(nocturne.vida(),160)
		assert.equals(nocturne.ataque(),35)
		nocturne.comprarItem(tomoAmplificador1)
        assert.equals(nocturne.danioRecibido(),5)
         assert.equals(nocturne.vida(),161.25)
         assert.equals(nocturne.ataque(),35.25)
         nocturne.comprarItem(sombreroDeRabadon1)
         assert.equals(nocturne.danioRecibido(),10)
         assert.equals(nocturne.vida(),170)
         assert.equals(nocturne.ataque(),75.50)         
                  
        }
        
        test "Desequipado de items, control de vida y ataque (partiendo de base test anterior"{
         
         // base test equipado
         nocturne.dineroDisponible(2500)
         nocturne.comprarItem(anilloDoran1)
         assert.equals(nocturne.danioRecibido(),5)
         assert.equals(nocturne.vida(),160)
         assert.equals(nocturne.ataque(),35)
         nocturne.comprarItem(tomoAmplificador1)
         assert.equals(nocturne.danioRecibido(),5)
         assert.equals(nocturne.vida(),161.25)
         assert.equals(nocturne.ataque(),35.25)
         nocturne.comprarItem(sombreroDeRabadon1)
         assert.equals(nocturne.danioRecibido(),10)
         assert.equals(nocturne.vida(),170)
         assert.equals(nocturne.ataque(),75.50)
         
         // test nuevo
         nocturne.venderItem(anilloDoran1)
         assert.equals(nocturne.danioRecibido(),0)
         assert.equals(nocturne.vida(),105)
         assert.equals(nocturne.ataque(),60)
         nocturne.venderItem(tomoAmplificador1)
         assert.equals(nocturne.danioRecibido(),30)
         assert.equals(nocturne.vida(),112.5)
         assert.equals(nocturne.ataque(),60)    
         
         }
         
        test "Probando habilidades"    {
         
         nocturne.dineroDisponible(600)
         nocturne.comprarItem(tomoAmplificador1)
         nocturne.activarHabilidad(tomoAmplificador1)
         assert.equals(nocturne.dineroDisponible(),500)
         nocturne.venderItem(tomoAmplificador1)
         assert.equals(nocturne.danioRecibido(),30)
         nocturne.comprarItem(posionDeVida1)
         nocturne.activarHabilidad(posionDeVida1)
         nocturne.activarHabilidad(posionDeVida1)    
         assert.equals(nocturne.danioRecibido(),0)
         assert.throwsExceptionWithMessage("Habilidad no disponible",{ 
         	=> nocturne.activarHabilidad(posionDeVida1)
         })                  
         
        }
	
	// BATALLAS
	
	test "nocturne, con 100 de vida, ataca a minons1 y pierde 35 de vida" {
		
		nocturne.atacarOleada(minions1)
		
		assert.equals(nocturne.danioRecibido(), 35)		
	}
	
	test "nocturne, con 20 de ataque, ataca a minons3 y mueren 20 minions (quedan 10)" {
		
		nocturne.atacarOleada(minions3)
		
		assert.equals(minions3.cantidadDeMinions(), 10)		
	}
	
	test "nocturne, con 20 de ataque, ataca a minons3, mueren 20 minions y gana 20 de credito" {
		
		nocturne.atacarOleada(minions3)
		
		assert.equals(nocturne.dineroDisponible(), 20)		
	}

	test "nocturne, con 20 de ataque, ataca a minons2, mueren 20 minions y la oleada esta muerta" {
		
		nocturne.atacarOleada(minions2)
		
		assert.that(minions2.estaAbatida())		
	}

	test "nocturne, con 20 de ataque, ataca a ejercito1 y el ejercito esta vivo debido a minions3" {
		
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.notThat(ejercito1.estaAbatido())
		assert.equals(ejercito1.oleadasVivas(), [minions3])		
	}

	test "nocturne, con 20 de ataque, ataca a ejercito1 y gana 50 de credito
			(10 de minions1, 20 de minions2 y 20 de minions3)" {
		
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.equals(nocturne.dineroDisponible(), 50)		
	}

	test "nocturne, con 20 de ataque, ataca a ejercito1 y recibe está muerto ya que recibe
			105 de daño" {
		
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.that(nocturne.estaMuerto())	
	}

	test "nocturne se equipa con TomoAmplificador, ataca una oleada
		y dismiye la cantidad de bloqueos disponibles (1) y no recibe daño" {
		
		nocturne.dineroDisponible(600)
		nocturne.comprarItem(tomoAmplificador1)
		nocturne.atacarOleada(minions1)
		
		assert.equals(nocturne.bloqueosDisponibles(), 1)
		assert.equals(nocturne.danioRecibido(), 0)	
	}

	test "nocturne se equipa con TomoAmplificador, ataca a ejercito1, se queda sin bloqueos
		y recibe daño de oleada3 (45)" {
		
		nocturne.dineroDisponible(600)
		nocturne.comprarItem(tomoAmplificador1)
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)

				
		assert.equals(nocturne.bloqueosDisponibles(), 0)
		assert.equals(nocturne.danioRecibido(), 45)	
	}	

	test "nocturne se equipa con BastonVacio que tiene un SombreroDeRabadon, ataca a ejercito1 
			y el ejercito esta abatido (ataque = 20 + 40). El daño recibido es de 105 ya que no
			tiene efectos de equiparse" {
		
		bastonVacio1.agregarMaterial(sombreroDeRabadon1)
		nocturne.comprarItem(bastonVacio1)
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.that(ejercito1.estaAbatido())
		assert.equals(nocturne.danioRecibido(), 105)
	}

}

import campeones.*
import items.*
import oleadasMinions.*

describe "Test complementarios" {
	
	// CAMPEONES
	var nocturne = new Campeon(vidaInicial=100 , ataqueInicial=20)
	
	// MINIONS
	var minions1 = new OleadaMinions ( cantidadDeMinions= 10, plusDanio=25)
	var minions2 = new OleadaMinions(cantidadDeMinions=20 , plusDanio =5)	
	var minions3 = new OleadaMinions(cantidadDeMinions=30 , plusDanio =15)
	var ejercito1 = new EjercitoDeMinions ()
	
	// ITEMS
	var tomoAmplificador1 = new TomoAmplificador()
	var anilloDoran1 = new AnilloDeDoran()
	var anilloDoran2 = new AnilloDeDoran()	
	var bastonVacio1 = new BastonVacio ()
	var sombreroDeRabadon1 = new SombreroDeRabadon()
	var posionDeVida1 = new PosionDeVida()			
		
	// MANEJO DE INVENTARIO Y DINERO
	
	test "campeon quiere comprar item pero no tiene dinero sufiente" {
		
		assert.throwsExceptionWithMessage("Saldo insuficiente", { => 
			nocturne.comprarItem(anilloDoran1)
		})
	}
	
	test "campeon tiene 100 de credito y compra un anillo de doran" {
		
		nocturne.dineroDisponible(300)
		nocturne.comprarItem(anilloDoran1)
		
		assert.equals(nocturne.dineroDisponible(),0)
		assert.that(nocturne.inventario().contains(anilloDoran1))
	}
	
	// BATALLAS
	
	test "nocturne, con 100 de vida, ataca a minons1 y pierde 35 de vida" {
		
		nocturne.atacarOleada(minions1)
		
		assert.equals(nocturne.danioRecibido(), 35)		
	}
	
	test "nocturne, con 20 de ataque, ataca a minons3 y mueren 20 minions (quedan 10)" {
		
		nocturne.atacarOleada(minions3)
		
		assert.equals(minions3.cantidadDeMinions(), 10)		
	}
	
	test "nocturne, con 20 de ataque, ataca a minons3, mueren 20 minions y gana 20 de credito" {
		
		nocturne.atacarOleada(minions3)
		
		assert.equals(nocturne.dineroDisponible(), 20)		
	}

	test "nocturne, con 20 de ataque, ataca a minons2, mueren 20 minions y la oleada esta muerta" {
		
		nocturne.atacarOleada(minions2)
		
		assert.that(minions2.estaAbatida())		
	}
	
	test "nocturne, con 20 de ataque, ataca a ejercito1 y el ejercito esta vivo debido a minions3" {
		
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.notThat(ejercito1.estaAbatido())
		assert.equals(ejercito1.oleadasVivas(), [minions3])
		
	}

	test "nocturne, con 20 de ataque, ataca a ejercito1 y gana 50 de credito
			(10 de minions1, 20 de minions2 y 20 de minions3)" {
		
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.equals(nocturne.dineroDisponible(), 50)
		
	}

	test "nocturne, con 20 de ataque, ataca a ejercito1 y recibe está muerto ya que recibe
			105 de daño" {
		
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.that(nocturne.estaMuerto())
		
	}

	test "nocturne se equipa con TomoAmplificador, ataca una oleada
		y dismiye la cantidad de bloqueos disponibles (1) y no recibe daño" {
		
		nocturne.dineroDisponible(600)
		nocturne.comprarItem(tomoAmplificador1)
		nocturne.atacarOleada(minions1)
		
		assert.equals(nocturne.bloqueosDisponibles(), 1)
		assert.equals(nocturne.danioRecibido(), 0)	
	}

	test "nocturne se equipa con TomoAmplificador, ataca a ejercito1, se queda sin bloqueos
		y recibe daño de oleada3 (45)" {
		
		nocturne.dineroDisponible(600)
		nocturne.comprarItem(tomoAmplificador1)
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.equals(nocturne.bloqueosDisponibles(), 0)
		assert.equals(nocturne.danioRecibido(), 45)	
	}	

	test "nocturne se equipa con BastonVacio que tiene un SombreroDeRabadon, ataca a ejercito1 y
			 se queda sin bloqueos, recibe daño de oleada3 (45) y el ejercito esta abatido" {
		
		bastonVacio1.agregarMaterial(sombreroDeRabadon1)
		ejercito1.agregarOleada(minions1)
		ejercito1.agregarOleada(minions2)
		ejercito1.agregarOleada(minions3)
		nocturne.atacarEjercito(ejercito1)
		
		assert.equals(nocturne.bloqueosDisponibles(), 0)
		assert.equals(nocturne.danioRecibido(), 45)
		assert.that(ejercito1.estaAbatido())
	}
	
}
